// <auto-generated />
using System;
using EMS.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EMS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240805071800_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("EMS.Domain.Entities.BandSalary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Band")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ConveyanceAllowance")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DearnessAllowance")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("EntertainmentAllowance")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HRA")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MedicalInsurance")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Stipend")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BandSalaries");
                });

            modelBuilder.Entity("EMS.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9bcbb61-b96b-4e2c-9af7-73beb9bfd969"),
                            Name = "Administration"
                        },
                        new
                        {
                            Id = new Guid("c81a540a-108a-4d19-9544-ca1f67082353"),
                            Name = "HR"
                        },
                        new
                        {
                            Id = new Guid("f9e2fcce-12ad-4889-9bef-77a7d2ca22d4"),
                            Name = "Finance"
                        },
                        new
                        {
                            Id = new Guid("a2c9c21a-cfee-4eb9-b54e-953a7b3e2b6d"),
                            Name = "IT"
                        });
                });

            modelBuilder.Entity("EMS.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Band")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EmployeeTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("f66df699-44af-4c8c-9c84-3517e579a488"),
                            Band = "E3",
                            DepartmentId = new Guid("a9bcbb61-b96b-4e2c-9af7-73beb9bfd969"),
                            DepartmentType = 0,
                            EmployeeTypeId = new Guid("d6fa2f29-009b-40ee-9d5f-be0a38ee5f0e"),
                            Name = "John Doe"
                        });
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.Certification", b =>
                {
                    b.Property<Guid>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CertificationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuingOrganization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CertificationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            CertificationId = new Guid("db95eba7-3d33-49e4-a4b8-63225f464706"),
                            CertificationName = "Microsoft Certified",
                            EmployeeId = new Guid("f66df699-44af-4c8c-9c84-3517e579a488"),
                            ExpiryDate = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2015, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssuingOrganization = "Microsoft"
                        });
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.Experience", b =>
                {
                    b.Property<Guid>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ExperienceId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Experiences");

                    b.HasData(
                        new
                        {
                            ExperienceId = new Guid("e725f42f-00de-42f0-a9ee-1d8a9fa8ba13"),
                            CompanyName = "XYZ Corp",
                            EmployeeId = new Guid("f66df699-44af-4c8c-9c84-3517e579a488"),
                            EndDate = new DateTime(2012, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobTitle = "Software Developer",
                            Responsibilities = "Developed web applications",
                            StartDate = new DateTime(2008, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.GovernmentDocument", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("GovernmentDocuments");

                    b.HasData(
                        new
                        {
                            DocumentId = new Guid("ce86a93f-fb8b-4140-bd2f-1efaeff30503"),
                            DocumentNumber = "123456789",
                            DocumentType = "Passport",
                            EmployeeId = new Guid("f66df699-44af-4c8c-9c84-3517e579a488"),
                            ExpiryDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.PersonalDetails", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.ToTable("PersonalDetails");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("f66df699-44af-4c8c-9c84-3517e579a488"),
                            Address = "123 Main St",
                            DateOfBirth = new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            PhoneNumber = "123-456-7890"
                        });
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.Qualification", b =>
                {
                    b.Property<Guid>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GraduationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QualificationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Qualifications");

                    b.HasData(
                        new
                        {
                            QualificationId = new Guid("8cbec964-28c0-4ea0-a0f8-b4e353fe7775"),
                            Degree = "B.Sc. Computer Science",
                            EmployeeId = new Guid("f66df699-44af-4c8c-9c84-3517e579a488"),
                            Grade = "A",
                            GraduationDate = new DateTime(2007, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Institution = "ABC University"
                        });
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeSalary", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Band")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CalculatedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.ToTable("EmployeeSalaries");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("f66df699-44af-4c8c-9c84-3517e579a488"),
                            Band = "E3",
                            CalculatedOn = new DateTime(2024, 8, 5, 12, 47, 59, 10, DateTimeKind.Local).AddTicks(784),
                            NetSalary = 60000m
                        });
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeType", b =>
                {
                    b.Property<Guid>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmpTypes")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("EmployeeTypes");

                    b.HasData(
                        new
                        {
                            EmployeeTypeId = new Guid("d6fa2f29-009b-40ee-9d5f-be0a38ee5f0e"),
                            EmpTypes = 0
                        },
                        new
                        {
                            EmployeeTypeId = new Guid("68b4af2b-81b1-4171-bf30-f72ae52ebcaa"),
                            EmpTypes = 1
                        },
                        new
                        {
                            EmployeeTypeId = new Guid("c6fb4587-251f-4620-8214-297c48ba8c43"),
                            EmpTypes = 2
                        },
                        new
                        {
                            EmployeeTypeId = new Guid("cb40836a-2b07-4acf-a91f-3e5d0f0ab19f"),
                            EmpTypes = 3
                        });
                });

            modelBuilder.Entity("EMS.Domain.Entities.Leave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Leaves");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa2c0d93-8eba-4cda-af99-b364c67ea17b"),
                            EmployeeId = new Guid("f66df699-44af-4c8c-9c84-3517e579a488"),
                            EndDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Reason = "Vacation",
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        });
                });

            modelBuilder.Entity("EMS.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GeneratedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0cfe0a16-8aad-4493-a9e3-d25037ac3cc5"),
                            Content = "This is the annual report content.",
                            DepartmentId = new Guid("f9e2fcce-12ad-4889-9bef-77a7d2ca22d4"),
                            GeneratedOn = new DateTime(2024, 8, 5, 12, 47, 59, 10, DateTimeKind.Local).AddTicks(862),
                            Title = "Annual Report"
                        });
                });

            modelBuilder.Entity("EMS.Domain.Entities.Employee", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.Domain.Entities.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.Certification", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("Certifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.Experience", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("Experiences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.GovernmentDocument", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("GovernmentDocuments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.PersonalDetails", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithOne("PersonalDetails")
                        .HasForeignKey("EMS.Domain.Entities.EmployeeDetails.PersonalDetails", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.Qualification", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("Qualifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeSalary", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithOne("EmployeeSalary")
                        .HasForeignKey("EMS.Domain.Entities.EmployeeSalary", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.Leave", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.Report", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Department", "Department")
                        .WithMany("Reports")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EMS.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("EMS.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("EmployeeSalary")
                        .IsRequired();

                    b.Navigation("Experiences");

                    b.Navigation("GovernmentDocuments");

                    b.Navigation("Leaves");

                    b.Navigation("PersonalDetails")
                        .IsRequired();

                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
