// <auto-generated />
using System;
using EMS.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EMS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240805143850_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("EMS.Domain.Entities.BandSalary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Band")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ConveyanceAllowance")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DearnessAllowance")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("EntertainmentAllowance")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HRA")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MedicalInsurance")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Stipend")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BandSalaries");
                });

            modelBuilder.Entity("EMS.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Band")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.Certification", b =>
                {
                    b.Property<Guid>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CertificationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuingOrganization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CertificationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.Experience", b =>
                {
                    b.Property<Guid>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ExperienceId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.GovernmentDocument", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("GovernmentDocuments");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.PersonalDetails", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.ToTable("PersonalDetails");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.Qualification", b =>
                {
                    b.Property<Guid>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GraduationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QualificationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeSalary", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Band")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CalculatedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.ToTable("EmployeeSalaries");
                });

            modelBuilder.Entity("EMS.Domain.Entities.Leave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.Certification", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("Certifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.Experience", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("Experiences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.GovernmentDocument", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("GovernmentDocuments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.PersonalDetails", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithOne("PersonalDetails")
                        .HasForeignKey("EMS.Domain.Entities.EmployeeDetails.PersonalDetails", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeDetails.Qualification", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("Qualifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.EmployeeSalary", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithOne("EmployeeSalary")
                        .HasForeignKey("EMS.Domain.Entities.EmployeeSalary", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.Leave", b =>
                {
                    b.HasOne("EMS.Domain.Entities.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("EmployeeSalary")
                        .IsRequired();

                    b.Navigation("Experiences");

                    b.Navigation("GovernmentDocuments");

                    b.Navigation("Leaves");

                    b.Navigation("PersonalDetails")
                        .IsRequired();

                    b.Navigation("Qualifications");
                });
#pragma warning restore 612, 618
        }
    }
}
